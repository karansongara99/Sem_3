-- Create salesmen table
CREATE TABLE salesmen
(
    salesman_id INT PRIMARY KEY,
    name VARCHAR(50),
    city VARCHAR(50),
    commission DECIMAL(4, 2)
);

INSERT INTO salesmen
    (salesman_id, name, city, commission)
VALUES
    (5001, 'James Hoog', 'New York', 0.15),
    (5002, 'Nail Knite', 'Paris', 0.13),
    (5005, 'Pit Alex', 'London', 0.11),
    (5006, 'Mc Lyon', 'Paris', 0.14),
    (5007, 'Paul Adam', 'Rome', 0.13),
    (5003, 'Lauson Hen', 'San Jose', 0.12);


-- Create customers table
CREATE TABLE customers
(
    customer_id INT PRIMARY KEY,
    cust_name VARCHAR(50),
    city VARCHAR(50),
    grade INT,
    salesman_id INT,
    FOREIGN KEY (salesman_id) REFERENCES salesmen(salesman_id)
);

INSERT INTO customers
    (customer_id, cust_name, city, grade, salesman_id)
VALUES
    (3002, 'Nick Rimando', 'New York', 100, 5001),
    (3007, 'Brad Davis', 'New York', 200, 5001),
    (3005, 'Graham Zusi', 'California', 200, 5002),
    (3008, 'Julian Green', 'London', 300, 5002),
    (3004, 'Fabian Johnson', 'Paris', 300, 5006),
    (3009, 'Geoff Cameron', 'Berlin', 100, 5003),
    (3003, 'Jozy Altidor', 'Moscow', 200, 5007),
    (3001, 'Brad Guzan', 'London', NULL, 5005);


-- Create orders table
CREATE TABLE orders
(
    ord_no INT PRIMARY KEY,
    purch_amt DECIMAL(10, 2),
    ord_date DATE,
    customer_id INT,
    salesman_id INT,
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),
    FOREIGN KEY (salesman_id) REFERENCES salesmen(salesman_id)
);


INSERT INTO orders
    (ord_no, purch_amt, ord_date, customer_id, salesman_id)
VALUES
    (70001, 150.5, '2012-10-05', 3005, 5002),
    (70009, 270.65, '2012-09-10', 3001, 5005),
    (70020, 65.26, '2012-10-05', 3002, 5001),
    (70004, 110.5, '2012-08-17', 3009, 5003),
    (70007, 948.5, '2012-09-10', 3005, 5002),
    (70005, 2400.6, '2012-07-27', 3007, 5001),
    (70008, 5760, '2012-09-10', 3002, 5001),
    (70010, 1983.43, '2012-10-10', 3004, 5006),
    (70003, 2480.4, '2012-10-10', 3009, 5003),
    (70012, 250.45, '2012-06-27', 3008, 5002),
    (70011, 75.29, '2012-08-17', 3003, 5007),
    (70013, 3045.6, '2012-04-25', 3002, 5001),
    (70099, 150.5, '2012-10-05', 3005, 5002),
    (70100, 270.65, '2012-09-10', 3001, 5005),
    (70002, 65.26, '2012-10-05', 3002, 5001);

--1. Write a SQL query to find all the orders issued by the salesman 'Paul Adam'. 
--Return ord_no, purch_amt, ord_date, customer_id and salesman_id.
SELECT * FROM customers
SELECT * FROM salesmen
SELECT o.ord_no,purch_amt,ord_date,customer_id,s.salesman_id FROM 
orders o INNER JOIN salesmen s ON o.salesman_id = s.salesman_id
WHERE s.name = 'Paul Adam'

--2.Write a SQL query to find all orders generated by London-based salespeople. Return ord_no, purch_amt, 
--ord_date, customer_id, salesman_id.
SELECT o.ord_no,purch_amt,ord_date,customer_id,s.salesman_id FROM
orders o INNER JOIN salesmen s ON o.salesman_id = s.salesman_id
WHERE s.city = 'LONDON'

--3. Write a SQL query to find all orders generated by the salespeople who may work for customers whose id is 
--3007. Return ord_no, purch_amt, ord_date, customer_id, salesman_id.
SELECT o.ord_no,purch_amt,ord_date,s.customer_id,s.salesman_id 
FROM orders o INNER JOIN customers s ON o.salesman_id = s.salesman_id
WHERE s.customer_id = 3007

--4. Write a SQL query to find the order values greater than the average order value of 10th October 2012. Return 
--ord_no, purch_amt, ord_date, customer_id, salesman_id.
SELECT ord_no,purch_amt,ord_date,customer_id,salesman_id 
FROM orders 
WHERE purch_amt > 
(SELECT AVG(purch_amt) FROM orders WHERE ord_date = '2012-10-10')

--5. Write a SQL query to find all the orders generated in New York city. Return ord_no, purch_amt, ord_date, 
--customer_id and salesman_id.
SELECT ord_no,purch_amt,ord_date,customer_id,s.salesman_id 
FROM orders o INNER JOIN salesmen s ON
o.salesman_id = s.salesman_id
WHERE s.city = 'New York'

--6. Write a SQL query to determine the commission of the salespeople in Paris. Return commission.
SELECT commission FROM salesmen where city = 'Paris'

--7. Write a query to display all the customers whose ID is 2001 below the salesperson ID of Mc Lyon.
SELECT * FROM customers 

--8. write a SQL query to count the number of customers with grades above the average in New York City. Return 
--grade and count.
SELECT COUNT(customer_id) FROM customers WHERE grade >  
(SELECT AVG(grade) FROM customers WHERE city='New York')

--9.Write a SQL query to find those salespeople who earned the maximum commission. Return ord_no, 
--purch_amt, ord_date, and salesman_id.
SELECT ord_no,purch_amt,ord_date,s.salesman_id 
FROM orders o INNER JOIN salesmen s 
ON o.salesman_id = s.salesman_id
WHERE s.commission = (SELECT MAX(commission) FROM salesmen)

--10. Write SQL query to find the customers who placed orders on 17th August 2012. Return ord_no, purch_amt, 
--ord_date, customer_id, salesman_id and cust_name.
SELECT o.ord_no, o.purch_amt, o.ord_date, o.customer_id, o.salesman_id, c.cust_name
FROM orders o
INNER JOIN customers c ON o.customer_id = c.customer_id
WHERE o.ord_date = '2012-08-17';

--11. Write a SQL query to find salespeople who had more than one customer. Return salesman_id and name.
SELECT s.salesman_id,s.name
FROM salesmen s INNER JOIN customers c 
ON s.salesman_id = c.salesman_id
WHERE c.customer_id > 1

--12. Write a SQL query to find those orders, which are higher than the average amount of the orders. Return 
--ord_no, purch_amt, ord_date, customer_id and salesman_id.
SELECT o.ord_no,o.purch_amt,o.ord_date,s.salesman_id,o.customer_id 
FROM orders o INNER JOIN salesmen s 
ON o.salesman_id = s.salesman_id
WHERE o.purch_amt > (SELECT AVG(purch_amt) FROM orders)

--13. Write a SQL query to find those orders that are equal or higher than the average amount of the orders. Return 
--ord_no, purch_amt, ord_date, customer_id and salesman_id.SELECT ord_no, purch_amt, ord_date, customer_id, salesman_id
FROM orders
WHERE purch_amt >= (SELECT AVG(purch_amt) FROM orders);

--14. Write a query to find the sums of the amounts from the orders table, grouped by date, and eliminate all dates 
--where the sum was not at least 1000.00 above the maximum order amount for that date.
SELECT ord_date, SUM(purch_amt) 
FROM orders
GROUP BY ord_date
HAVING SUM(purch_amt) > (SELECT MAX(purch_amt) FROM orders 
WHERE ord_date = ord_date) + 1000.00;

--15. Write a query to extract all data from the customer table if and only if one or more of the customers in the 
--customer table are located in London. Sample table : Customer
SELECT *
FROM customers
WHERE EXISTS (SELECT 1 FROM customers WHERE city = 'London');


---------------------------------------PART B-------------------------------------
--1. Write a SQL query to find salespeople who deal with multiple customers. Return salesman_id, name, city 
--and commission.

select * from salesmen where salesman_id in (select c.salesman_id
from customers c group by salesman_id having count(c.customer_id)>1 ) 

--2. Write a SQL query to find salespeople who deal with a single customer. Return salesman_id, name, city and 
--commission.

select * from salesmen where salesman_id in 
(select c.salesman_id
from customers c group by salesman_id having count(c.customer_id)=1 ) 

--3.Write a SQL query to find the salespeople who deal the customers with more than one order. Return 
--salesman_id, name, city and commission.SELECT * FROM salesmen WHERE salesman_id IN(SELECT c.salesman_id FROM customers c WHERE c.customer_id IN(SELECT ord_no FROM orders WHERE ord_no > 1 GROUP BY ord_no))--4. Write a SQL query to find the salespeople who deal with those customers who live in the same city. Return 
--salesman_id, name, city and commission
SELECT
    c.customer_id,
    c.city,
    s.salesman_id,
    s.name,
    s.city,
    s.commission
  FROM customers c
  INNER JOIN orders o ON c.customer_id = o.customer_id
  INNER JOIN salesmen s ON o.salesman_id = s.salesman_id
  WHERE s.city = c.city;

--5. Write a SQL query to find salespeople whose place of residence matches any city where customers live. 
--Return salesman_id, name, city and commission.
SELECT
  s.salesman_id,
  s.name,
  s.city AS salesman_city,
  s.commission
FROM salesmen s
INNER JOIN orders o ON s.salesman_id = o.salesman_id
INNER JOIN customers c ON o.customer_id = c.customer_id
WHERE s.city = c.city;

--6.Write a SQL query to find all those salespeople whose names appear alphabetically lower than the 
--customer’s name. Return salesman_id, name, city, commission
SELECT
  s.salesman_id,
  s.name AS salesman_name,
  s.city,
  s.commission
FROM salesmen s
INNER JOIN orders o ON s.salesman_id = o.salesman_id
INNER JOIN customers c ON o.customer_id = c.customer_id
WHERE s.name < c.cust_name;

--Write a SQL query to find all those customers with a higher grade than all the customers alphabetically below 
--the city of New York. Return customer_id, cust_name, city, grade, salesman_id.
SELECT
    c.customer_id,
    c.cust_name,
    c.city,
    c.grade,
    o.salesman_id
  FROM customers c
  INNER JOIN orders o ON c.customer_id = o.customer_id
  WHERE c.city < 'New York'

--Write a SQL query to find all those orders whose order amount exceeds at least one of the orders placed on 
---September 10th 2012. Return ord_no, purch_amt, ord_date, customer_id and salesman_id.
SELECT
    ord_no,
    purch_amt,
    ord_date,
    customer_id,
    salesman_id
  FROM orders
  WHERE ord_date = '2012-09-10'

--9.Write a SQL query to find orders where the order amount is less than the order amount of a customer residing 
--in London City. Return ord_no, purch_amt, ord_date, customer_id and salesman_id.SELECT
   o.ord_no,
  o.purch_amt,
  o.ord_date,
  o.customer_id,
  o.salesman_id
  FROM orders o
  INNER JOIN customers c ON o.customer_id = c.customer_id  WHERE o.purch_amt < (SELECT MIN(purch_amt) FROM orders WHERE customer_id IN  (SELECT customer_id FROM customers WHERE city = 'LONDON'));					---DOUBT--10. Write a SQL query to find those orders where every order amount is less than the maximum order amount of 
--a customer who lives in London City. Return ord_no, purch_amt, ord_date, customer_id and salesman_id.SELECT
   o.ord_no,
  o.purch_amt,
  o.ord_date,
  o.customer_id,
  o.salesman_id
  FROM orders o
  INNER JOIN customers c ON o.customer_id = c.customer_id  WHERE o.purch_amt < (SELECT MAX(purch_amt) FROM orders WHERE customer_id IN  (SELECT customer_id FROM customers WHERE city = 'LONDON'));					---DOUBT-------------------------------------PART - C--------------------------------------Write a SQL query to find those customers whose grades are higher than those living in New York City. 
--Return customer_id, cust_name, city, grade and salesman_id.
SELECT
  c.customer_id,
  c.cust_name,
  c.city,
  c.grade,
  c.salesman_id
  FROM customers c
  WHERE c.grade > (SELECT MAX(grade) FROM customers WHERE city IN  (SELECT city FROM customers WHERE city = 'New York')); --2.Write a SQL query to calculate the total order amount generated by a salesperson. Salespersons should be 
--from the cities where the customers reside. Return salesperson name, city and total order amount.	SELECT
  s.name AS salesman_name,
  s.city AS salesman_city,
  SUM(o.purch_amt) AS total_order_amount
FROM salesmen s
INNER JOIN orders o ON s.salesman_id = o.salesman_id
INNER JOIN customers c ON o.customer_id = c.customer_id
WHERE s.city = c.city
GROUP BY s.salesman_id, s.name, s.city;--3.Write a SQL query to find those customers whose grades are not the same as those who live in London City. 
--Return customer_id, cust_name, city, grade and salesman_id.SELECT
  c.customer_id,
  c.cust_name,
  c.city,
  c.grade,
  c.salesman_id
FROM customers c
WHERE c.grade NOT IN (SELECT grade FROM customers WHERE city IN
(SELECT city FROM customers WHERE city  = 'LONDON'));

--4.Write a SQL query to find those customers whose grades are different from those living in Paris. Return 
--customer_id, cust_name, city, grade and salesman_id.
SELECT
  c.customer_id,
  c.cust_name,
  c.city,
  c.grade,
  c.salesman_id
FROM customers c
WHERE c.grade NOT IN (SELECT grade FROM customers WHERE city = 'Paris') 

--5.Write a SQL query to find all those customers who have different grades than any customer who lives in 
--Dallas City. Return customer_id, cust_name,city, grade and salesman_id.
SELECT
  c.customer_id,
  c.cust_name,
  c.city,
  c.grade,
  c.salesman_id
FROM customers c
WHERE c.grade NOT IN (SELECT grade FROM customers WHERE city = 'Dallas')
